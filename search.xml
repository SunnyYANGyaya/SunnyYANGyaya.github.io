<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>clash for linux</title>
    <url>/2023/07/18/clash-for-linux/</url>
    <content><![CDATA[<p>Clash 是一个使用 Go 语言编写，基于规则的跨平台代理软件核心程序。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.13.0/clash-linux-amd64-v1.13.0.gz</span><br></pre></td></tr></table></figure>

<p>最新版本 <a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压后直接执行，将在 <code>~/.config/</code> 目录下生成一个 clash 目录，其中有配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip -d clash-linux-amd64-v1.13.0.gz</span><br><span class="line">chmod +x clash-linux-amd64-v1.13.0</span><br><span class="line">./clash-linux-amd64-v1.13.0</span><br><span class="line">INFO[0000] Can&#x27;t find config, create a initial config file</span><br><span class="line">INFO[0000] Can&#x27;t find MMDB, start download</span><br></pre></td></tr></table></figure>

<p>为了后期管理方便，可以之间将解压后的 clash 拷贝到 <code>~/.config/clash</code> 目录下，并重命名为 clash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp ./clash-linux-amd64-v1.13.0 ~/.config/clash/clash</span><br><span class="line"></span><br><span class="line">$ls ~/.config/clash/</span><br><span class="line">clash  config.yaml</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O config.yaml &quot;代理商提供的订阅链接&quot;</span><br><span class="line">wget -O config.yaml &quot;https://xxxxxxxxxxxxxxxxxx06d2739906177ad22&amp;flag=clash&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果下载到的是一大堆字符则需要在订阅链接的后面添加 <strong>&amp;flag&#x3D;clash</strong></p>
</blockquote>
<p>执行<code>./clash</code>，将会下载 <code>Country.mmdb</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./clash</span><br><span class="line">WARN[0000] MMDB invalid, remove and download</span><br></pre></td></tr></table></figure>

<p>如果下载失败进行手动下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$./clash</span><br><span class="line">WARN[0000] MMDB invalid, remove and download</span><br><span class="line">FATA[0030] Initial configuration directory error: can&#x27;t initial MMDB: can&#x27;t download MMDB: Get &quot;https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb&quot;: dial tcp 146.75.113.229:443: i/o timeout</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb</span><br></pre></td></tr></table></figure>

<p>在 <a href="https://github.com/Dreamacro/maxmind-geoip/releases">https://github.com/Dreamacro/maxmind-geoip/releases</a> 下载也可以</p>
<p>以上准备配置文件弄号后就可以运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.config/clash</span><br><span class="line">↪ =&gt;$ls</span><br><span class="line">clash  config.yaml  Country.mmdb</span><br><span class="line"></span><br><span class="line">↪ =&gt;$./clash</span><br><span class="line">INFO[0000] Start initial compatible provider 故障转移</span><br><span class="line">INFO[0000] Start initial compatible provider 自动选择</span><br><span class="line">INFO[0000] Start initial compatible provider 一元机场</span><br><span class="line">INFO[0000] RESTful API listening at: 127.0.0.1:9090</span><br><span class="line">INFO[0000] Mixed(http+socks) proxy listening at: [::]:7890</span><br></pre></td></tr></table></figure>

<p>在 <code>clash</code> 启动后用浏览器访问网址 <code>http://clash.razord.top/</code> ，在这里修改配置信息</p>
<p>命令行设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gsettings set org.gnome.system.proxy.http host &#x27;127.0.0.1&#x27;</span><br><span class="line">gsettings set org.gnome.system.proxy.http port 7890</span><br><span class="line">gsettings set org.gnome.system.proxy.https host &#x27;127.0.0.1&#x27;</span><br><span class="line">gsettings set org.gnome.system.proxy.https port 7890</span><br><span class="line">gsettings set org.gnome.system.proxy.ftp host &#x27;&#x27;</span><br><span class="line">gsettings set org.gnome.system.proxy.ftp port 0</span><br><span class="line">gsettings set org.gnome.system.proxy.socks host &#x27;127.0.0.1&#x27;</span><br><span class="line">gsettings set org.gnome.system.proxy.socks port 7890</span><br><span class="line"></span><br><span class="line">gsettings set org.gnome.system.proxy mode &#x27;manual&#x27;;</span><br></pre></td></tr></table></figure>



<h4 id="git-代理"><a href="#git-代理" class="headerlink" title="git 代理"></a>git 代理</h4><p>https 传输</p>
<ul>
<li><p>http 代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#x27;http://127.0.0.1:1080&#x27;</span><br><span class="line">git config --global https.proxy &#x27;http://127.0.0.1:1080&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>socks5 代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1081&#x27;  </span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1081&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy  </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/366589407">如何在 Linux 中使用 Clash</a></li>
<li><a href="https://www.alvinkwok.cn/2022/01/29/2022/01/Clash%20For%20Linux%20Install%20Guide/">CLash for Linux 安装配置</a></li>
<li><a href="https://blog.zzsqwq.cn/posts/how-to-use-clash-on-linux/">如何在 Linux 上优雅的使用 Clash？</a> —— Docker</li>
<li><a href="https://winddoing.github.io/post/9992854.html">clash for linux–Winddoing’s Notes</a></li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>first-page</title>
    <url>/2023/07/18/first-page/</url>
    <content><![CDATA[<p>这是我的第一篇文章，小小白给你打个招呼</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2023/07/18/test-my-site/</url>
    <content><![CDATA[<h2 id="Github-Hexo记录第一次配置Hexo"><a href="#Github-Hexo记录第一次配置Hexo" class="headerlink" title="Github+Hexo记录第一次配置Hexo"></a>Github+Hexo记录第一次配置Hexo</h2><h3 id="创建github个人仓库"><a href="#创建github个人仓库" class="headerlink" title="创建github个人仓库"></a>创建github个人仓库</h3><p>首先登录个人GitHub账号，使用邮箱注册账号</p>
<p>点击GitHub中的New repository创建新仓库，仓库名称为：用户名.github.io（这个是固定写法）</p>
<p>比如我的就是：    SunnyYANGyaya.github.io</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。从Git官网下载：<a href="https://git-scm.com/download/win">Download for Windows</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，在随便哪个目录下，鼠标右击打开Git Bash</p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_20-47-57.webp" alt="Snipaste_2023-07-18_20-47-57"></p>
<p>如果安装成功，接下来配置ssh秘钥文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>生成ssh秘钥文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后直接三个回车，默认不需要设置密码</p>
<p>生成的.ssh文件在C盘用户文件夹.ssh文件夹里面，将id_rsa.pub秘钥中的内容全部复制</p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_20-53-13.webp" alt="Snipaste_2023-07-18_20-53-13"></p>
<p>然后打开<a href="https://github.com/settings/keys">settings_keys</a>界面，新建new SSH Key</p>
<p>title随便写，把刚刚复制的sshkey粘贴到key中，key type为authentication Key（如果没有就不用选了），最后点击Add SSH key。</p>
<p>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a></p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_20-57-31.webp" alt="Snipaste_2023-07-18_20-57-31"></p>
<p>这样就是成功了</p>
<p>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v 就可以检测node是否安装成功，这个，一般都是一直next就行</p>
<p>检测npm是否安装成功，在命令行中输入npm -v </p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog或者myblog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p>
<p>使用npm命令安装Hexo，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<p>安装最好翻墙，耐心等待，安装完成后就可以初始化我们的博客了，输入：（<strong>init后面要接自己创建的空文件夹的名字</strong>，不然没有反应）注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>

<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_21-04-33.webp" alt="Snipaste_2023-07-18_21-04-33"></p>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g     #安装Hexo<br>npm update hexo -g    #升级<br>hexo init    #初始化博客</p>
<p>命令简写<br>hexo n  “我的博客” &#x3D;&#x3D; hexo new  “我的博客”   #新建文章<br>hexo g &#x3D;&#x3D; hexo generate   #生成<br>hexo s &#x3D;&#x3D; hexo server   #启动服务预览<br>hexo d &#x3D;&#x3D; hexo deploy   #部署</p>
<p>hexo server     #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s    #静态模式<br>hexo server -p 5000     #更改端口<br>hexo server -i 192.168.1.1     #自定义 IP<br>hexo clean     #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的<code>_config.yml</code>文件称为站点配置文件，进入根目录里的themes文件夹，里面也有个<code>_config.yml</code>文件，这个称为<strong>主题</strong>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">站点配置文件： \github-blog\blog-theme</span><br><span class="line">主题配置文件： \github-blog\blog-theme\themes\landscape</span><br></pre></td></tr></table></figure>

<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: </p>
<p>master参考如下：</p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_21-08-17.5vwm3ip8ty4g.webp" alt="Snipaste_2023-07-18_21-08-17"></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这时，我们分别输入三条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> </p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p>这个主题有中文文档，帮助小白理解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://keep-docs.xpoet.cn/</span><br></pre></td></tr></table></figure>

<p>在你这个博客的界面下，打开git Bash Here</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure>

<p>Keep 主题安装完成后，在 Hexo 配置文件 <code>_config.yml</code> 中将 <code>theme</code> 设置为 <code>keep</code></p>
<p><img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_21-13-41.webp" alt="Snipaste_2023-07-18_21-13-41"></p>
<p>就可以了，如果想要修改更多，就参考帮助文档</p>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>文章需要用markdown写，语法自己去网上找，用Typora或者obdsian编写</p>
<p>在命令行中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;博客名字&quot;</span><br></pre></td></tr></table></figure>

<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，</p>
<p>这是我的一篇博文内容示例：</p>
<img src="https://cdn.staticaly.com/gh/SunnyYANGyaya/picx-images-hosting@master/20230718/Snipaste_2023-07-18_21-16-29.webp" alt="Snipaste_2023-07-18_21-16-29" style="zoom:50%;" />

<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug  在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d  生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<h3 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h3><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="/%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。</p>
<p>我用的这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/XPoet/picx</span><br></pre></td></tr></table></figure>

<h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><p>所谓的个性化设置就是根据个人需要添加不同的插件及功能</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 我叫SunnyYang</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: SunnyYang</span><br><span class="line">language: en</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，详细查看主题的帮助文档</p>
<p>参考链接：<a href="https://zhuanlan.zhihu.com/p/26625249?dark_mode=0">https://zhuanlan.zhihu.com/p/26625249?dark_mode=0</a></p>
]]></content>
      <tags>
        <tag>init</tag>
      </tags>
  </entry>
</search>

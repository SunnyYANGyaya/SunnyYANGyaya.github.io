[{"title":"first-page","url":"/2023/07/18/first-page/","content":"这是我的第一篇文章，小小白给你打个招呼\n"},{"title":"Hello World","url":"/2023/07/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"test_my_site","url":"/2023/07/18/test-my-site/","content":"Github+Hexo记录第一次配置Hexo创建github个人仓库首先登录个人GitHub账号，使用邮箱注册账号\n点击GitHub中的New repository创建新仓库，仓库名称为：用户名.github.io（这个是固定写法）\n比如我的就是：    SunnyYANGyaya.github.io\n安装Git什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。从Git官网下载：Download for Windows 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，在随便哪个目录下，鼠标右击打开Git Bash\n\n如果安装成功，接下来配置ssh秘钥文件：\ngit config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;\n\n生成ssh秘钥文件：\nssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;\n\n然后直接三个回车，默认不需要设置密码\n生成的.ssh文件在C盘用户文件夹.ssh文件夹里面，将id_rsa.pub秘钥中的内容全部复制\n\n然后打开settings_keys界面，新建new SSH Key\ntitle随便写，把刚刚复制的sshkey粘贴到key中，key type为authentication Key（如果没有就不用选了），最后点击Add SSH key。\n在Git Bash中检测GitHub公钥设置是否成功，输入 ssh &#103;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;\n\n这样就是成功了\n这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。\n安装Node.jsHexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v 就可以检测node是否安装成功，这个，一般都是一直next就行\n检测npm是否安装成功，在命令行中输入npm -v \n到这了，安装Hexo的环境已经全部搭建完成。\n安装HexoHexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog或者myblog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行\n使用npm命令安装Hexo，输入：\nnpm install -g hexo-cli \n\n安装最好翻墙，耐心等待，安装完成后就可以初始化我们的博客了，输入：（init后面要接自己创建的空文件夹的名字，不然没有反应）注意，这里的命令都是作用在刚刚创建的Blog文件夹中。\nhexo init myblog\n\n为了检测我们的网站雏形，分别按顺序输入以下三条命令：\nhexo new test_my_sitehexo ghexo s\n\n这些命令在后面作介绍，完成后，打开浏览器输入地址：\nlocalhost:4000\n可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。\n\n现在来介绍常用的Hexo 命令\nnpm install hexo -g     #安装Hexonpm update hexo -g    #升级hexo init    #初始化博客\n命令简写hexo n  “我的博客” &#x3D;&#x3D; hexo new  “我的博客”   #新建文章hexo g &#x3D;&#x3D; hexo generate   #生成hexo s &#x3D;&#x3D; hexo server   #启动服务预览hexo d &#x3D;&#x3D; hexo deploy   #部署\nhexo server     #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s    #静态模式hexo server -p 5000     #更改端口hexo server -i 192.168.1.1     #自定义 IPhexo clean     #清除缓存，若是网页正常情况下可以忽略这条命令\n刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。\n推送网站上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件，进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件\n站点配置文件： \\github-blog\\blog-theme主题配置文件： \\github-blog\\blog-theme\\themes\\landscape\n\n下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：\ndeploy:type: gitrepo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .gitbranch: \nmaster参考如下：\n\n保存站点配置文件。\n其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：\nnpm install hexo-deployer-git --save\n\n这时，我们分别输入三条命令：\nhexo clean hexo g hexo d\n\n其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 http://xxxx.github.io \n你就会发现你的博客已经上线了，可以在网络上被访问了。\n更换主题如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：Themes 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n\n这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next\n这个主题有中文文档，帮助小白理解\nhttps://keep-docs.xpoet.cn/\n\n在你这个博客的界面下，打开git Bash Here\ngit clone https://github.com/XPoet/hexo-theme-keep themes/keep\n\nKeep 主题安装完成后，在 Hexo 配置文件 _config.yml 中将 theme 设置为 keep\n\n就可以了，如果想要修改更多，就参考帮助文档\n发布文章文章需要用markdown写，语法自己去网上找，用Typora或者obdsian编写\n在命令行中输入：\nhexo n &quot;博客名字&quot;\n\n我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，\n这是我的一篇博文内容示例：\n\n\n通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug  在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d  生成、部署网页。随后可以在浏览器中输入域名浏览。\n寻找图床图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**** 完成图片的插入，这种网站就被成为图床。\n我用的这个\nhttps://github.com/XPoet/picx\n\n个性化设置所谓的个性化设置就是根据个人需要添加不同的插件及功能\n在站点配置文件_config.yml修改基本的站点信息\n# Sitetitle: 我叫SunnyYangsubtitle: &#x27;&#x27;description: &#x27;&#x27;keywords:author: SunnyYanglanguage: entimezone: &#x27;&#x27;\n\n依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。\n在主题配置文件_config.yml修改基本的主题信息，详细查看主题的帮助文档\n参考链接：https://zhuanlan.zhihu.com/p/26625249?dark_mode=0\n","tags":["init"]},{"title":"clash for linux","url":"/2023/07/18/clash-for-linux/","content":"Clash 是一个使用 Go 语言编写，基于规则的跨平台代理软件核心程序。\n下载wget https://github.com/Dreamacro/clash/releases/download/v1.13.0/clash-linux-amd64-v1.13.0.gz\n\n最新版本 https://github.com/Dreamacro/clash/releases\n安装解压后直接执行，将在 ~/.config/ 目录下生成一个 clash 目录，其中有配置文件\ngzip -d clash-linux-amd64-v1.13.0.gzchmod +x clash-linux-amd64-v1.13.0./clash-linux-amd64-v1.13.0INFO[0000] Can&#x27;t find config, create a initial config fileINFO[0000] Can&#x27;t find MMDB, start download\n\n为了后期管理方便，可以之间将解压后的 clash 拷贝到 ~/.config/clash 目录下，并重命名为 clash\ncp ./clash-linux-amd64-v1.13.0 ~/.config/clash/clash$ls ~/.config/clash/clash  config.yaml\n\n配置下载配置文件\nwget -O config.yaml &quot;代理商提供的订阅链接&quot;wget -O config.yaml &quot;https://xxxxxxxxxxxxxxxxxx06d2739906177ad22&amp;flag=clash&quot;\n\n\n如果下载到的是一大堆字符则需要在订阅链接的后面添加 &amp;flag&#x3D;clash\n\n执行./clash，将会下载 Country.mmdb\n./clashWARN[0000] MMDB invalid, remove and download\n\n如果下载失败进行手动下载\n$./clashWARN[0000] MMDB invalid, remove and downloadFATA[0030] Initial configuration directory error: can&#x27;t initial MMDB: can&#x27;t download MMDB: Get &quot;https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb&quot;: dial tcp 146.75.113.229:443: i/o timeout\n\nwget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb\n\n在 https://github.com/Dreamacro/maxmind-geoip/releases 下载也可以\n以上准备配置文件弄号后就可以运行\n~/.config/clash↪ =&gt;$lsclash  config.yaml  Country.mmdb↪ =&gt;$./clashINFO[0000] Start initial compatible provider 故障转移INFO[0000] Start initial compatible provider 自动选择INFO[0000] Start initial compatible provider 一元机场INFO[0000] RESTful API listening at: 127.0.0.1:9090INFO[0000] Mixed(http+socks) proxy listening at: [::]:7890\n\n在 clash 启动后用浏览器访问网址 http://clash.razord.top/ ，在这里修改配置信息\n命令行设置：\ngsettings set org.gnome.system.proxy.http host &#x27;127.0.0.1&#x27;gsettings set org.gnome.system.proxy.http port 7890gsettings set org.gnome.system.proxy.https host &#x27;127.0.0.1&#x27;gsettings set org.gnome.system.proxy.https port 7890gsettings set org.gnome.system.proxy.ftp host &#x27;&#x27;gsettings set org.gnome.system.proxy.ftp port 0gsettings set org.gnome.system.proxy.socks host &#x27;127.0.0.1&#x27;gsettings set org.gnome.system.proxy.socks port 7890gsettings set org.gnome.system.proxy mode &#x27;manual&#x27;;\n\n\n\ngit 代理https 传输\n\nhttp 代理\ngit config --global http.proxy &#x27;http://127.0.0.1:1080&#x27;git config --global https.proxy &#x27;http://127.0.0.1:1080&#x27;\n\nsocks5 代理\ngit config --global http.proxy &#x27;socks5://127.0.0.1:1081&#x27;  git config --global https.proxy &#x27;socks5://127.0.0.1:1081&#x27;\n\n取消代理\ngit config --global --unset http.proxy  git config --global --unset https.proxy\n\n参考\n如何在 Linux 中使用 Clash\nCLash for Linux 安装配置\n如何在 Linux 上优雅的使用 Clash？ —— Docker\nclash for linux–Winddoing’s Notes\n\n","tags":["tools"]}]